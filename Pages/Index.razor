@page "/"

@using gpxSlopeCalculator.Logic

<PageTitle>Slope chart</PageTitle>

<h1>Choose you gpx file and generate chart...</h1>
<InputFile OnChange="@LoadFiles"/>

@if (!@IsChartHidden)
{
    <Chart Id="slopeChart" Type="@Chart.ChartType.Scatter" Datasets="@_datasetData.ToArray()">
    </Chart>
}

@code {
    private string? content;
    private bool IsChartHidden => _datasetData.Count == 0;
    private List<Chart.Dataset> _datasetData = new();
    
    private async Task LoadFiles(InputFileChangeEventArgs arg)
    {
        if (!arg.File.Name.EndsWith("gpx", StringComparison.InvariantCultureIgnoreCase))
        {
            throw new ArgumentException($"Only gpx files are accepted. Got: {arg.File.Name}");
        }
        
        content = await new StreamReader(arg.File.OpenReadStream()).ReadToEndAsync();
        _datasetData = new();
        await GenerateSlope();
    }

    private Task GenerateSlope()
    {
        if (content == null)
        {
            throw new ArgumentException("First choose file");
        }
        
        var gpxContent = GpxSerializer.Deserialize(content);

        double totalDistance = 0;
        var previousPoint = gpxContent.Trk.Trkseg.Trkpt.First();
        var elevationPerDistance = new List<(double elevetion, double totalDistance, double pointDistance)>();
        foreach (var trkpt in gpxContent.Trk.Trkseg.Trkpt)
        {
            var pointDistance = Haversine.Calculate(previousPoint.Lat, previousPoint.Lon, trkpt.Lat, trkpt.Lon);
            if (pointDistance < 0.0005)
            {
                continue;
            }
            totalDistance += pointDistance;
            
            
            elevationPerDistance.Add((trkpt.Ele, Math.Round(totalDistance, 2), pointDistance));

            previousPoint = trkpt;
        }

        var elevetions = elevationPerDistance.Select(x => x.elevetion).ToArray();

        var secondSlopeDerivative = SlopeDerivativeCalculator.GetSecondSlopeDerivative(elevetions);
        var slopePercentile = PercentileCalculator.Percentile(secondSlopeDerivative, 0.95);
        
        var k = 0;
        double slopeDistance = 0;
        double? previousSlope = null;
        var firstElevation = elevationPerDistance.First().elevetion;
        var previousSlopeElevation = firstElevation;

        var iterationElevations = new List<(double elevetion, double totalDistance)>();
        for (var i = 0; i < elevationPerDistance.Count - 1; i++)
        {
            var e = elevationPerDistance[i];

            iterationElevations.Add((e.elevetion, e.totalDistance));
            slopeDistance += e.pointDistance;

            if (slopeDistance < 100)
            {
                k++;
                continue;
            }

            var isHighSlope = secondSlopeDerivative[k] >= slopePercentile;
            var isLocalOrMaximum = MathHelper.IsLocalMaximum(elevetions, k, 3) || MathHelper.IsLocalMinimum(elevetions, k, 3);
            if (!isHighSlope && !isLocalOrMaximum)
            {
                k++;
                continue;
            }
            
            var angle = MathHelper.RadiansToAngle(Math.Atan((e.elevetion - previousSlopeElevation) / slopeDistance));
            if (previousSlope.HasValue && Math.Abs(previousSlope.Value - angle) < 2)
            {
                k++;
                continue;
            }

            if (i != elevationPerDistance.Count - 1)
            {
                var nextIterationValue = elevationPerDistance[i + 1]; 
                iterationElevations.Add((nextIterationValue.elevetion, nextIterationValue.totalDistance));
            }
            
            _datasetData.Add(new Chart.Dataset()
            {
                Data = iterationElevations.ToArray(),
                HexColor = PlotGenerator.SlopeColorPerGainHex(angle),
                Label = PlotGenerator.GetAngleLabel(angle),
                SlopeAngle = angle
            });

            
            iterationElevations.Clear();
            previousSlopeElevation = e.elevetion;
            slopeDistance = 0;
            previousSlope = angle;
            k++;
        }

        return Task.CompletedTask;
    }
}
