@page "/"
@inject IJSRuntime JSRuntime

@using gpxSlopeCalculator.Logic

<PageTitle>Slope chart</PageTitle>

<MudFileUpload T="IBrowserFile" Accept=".gpx" OnFilesChanged="LoadFiles" MaximumFileCount="100">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context">
            Only .gpx files
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

@if (!@IsChartHidden)
{
    <Chart Id="slopeChart" OnSettingsChanged="GenerateSlope" Type="@Chart.ChartType.Scatter" ElevationGain="_sumElevationGain" Distance="_totalDistance" @ref="SlopeChart" Datasets="@_datasetData.ToArray()">
    </Chart>
}

@code {
    private Chart? SlopeChart { get; set; }
    private string? content;
    private bool IsChartHidden => _datasetData.Count == 0;
    private List<Chart.Dataset> _datasetData = new();
    private SlopeGradeType SlopeGradeType => SlopeChart?.SlopeType ?? SlopeGradeType.Percent;
    private double _sumElevationGain;
    private double _totalDistance;

    private async Task LoadFiles(InputFileChangeEventArgs arg)
    {
        if (!arg.File.Name.EndsWith("gpx", StringComparison.InvariantCultureIgnoreCase))
        {
            throw new ArgumentException($"Only gpx files are accepted. Got: {arg.File.Name}");
        }
        
        content = await new StreamReader(arg.File.OpenReadStream()).ReadToEndAsync();
        _datasetData = new();
        await GenerateSlope();
    }

    private Task GenerateSlope()
    {
        if (content == null)
        {
            throw new ArgumentException("First choose file");
        }
        
        _datasetData.Clear();
        Console.WriteLine($"Generating slope with type: {SlopeChart?.SlopeType.ToString()}");
        
        var gpxContent = GpxSerializer.Deserialize(content);
        _totalDistance = 0;
        _sumElevationGain = 0;

        var previousPoint = gpxContent.Trk.Trkseg.Trkpt.First();
        var elevationPerDistance = new List<(double elevetion, double totalDistance, double pointDistance)>();
        foreach (var trkpt in gpxContent.Trk.Trkseg.Trkpt)
        {
            if (trkpt.Ele > previousPoint.Ele)
            {
                _sumElevationGain += trkpt.Ele - previousPoint.Ele;
            }
            
            var pointDistance = Haversine.Calculate(previousPoint.Lat, previousPoint.Lon, trkpt.Lat, trkpt.Lon);
            if (pointDistance < 0.0005)
            {
                continue;
            }
            _totalDistance += pointDistance;
            
            elevationPerDistance.Add((trkpt.Ele, Math.Round(_totalDistance, 2), pointDistance));

            previousPoint = trkpt;
        }

        var elevetions = elevationPerDistance.Select(x => x.elevetion).ToArray();

        var secondSlopeDerivative = SlopeDerivativeCalculator.GetSecondSlopeDerivative(elevetions);
        var slopePercentile = PercentileCalculator.Percentile(secondSlopeDerivative, 0.95);
        
        var k = 0;
        double slopeDistance = 0;
        double? previousSlope = null;
        var firstElevation = elevationPerDistance.First().elevetion;
        var previousSlopeElevation = firstElevation;

        var iterationElevations = new List<(double elevetion, double totalDistance)>();
        for (var i = 0; i < elevationPerDistance.Count - 1; i++)
        {
            var e = elevationPerDistance[i];

            iterationElevations.Add((e.elevetion, e.totalDistance));
            slopeDistance += e.pointDistance;

            if (slopeDistance < 100)
            {
                k++;
                continue;
            }

            var isHighSlope = secondSlopeDerivative[k] >= slopePercentile;
            var isLocalOrMaximum = MathHelper.IsLocalMaximum(elevetions, k, 3) || MathHelper.IsLocalMinimum(elevetions, k, 3);
            if (!isHighSlope && !isLocalOrMaximum)
            {
                k++;
                continue;
            }
            
            var slope = PlotGenerator.CalculateSlopeGrade(e.elevetion - previousSlopeElevation, slopeDistance, SlopeGradeType);
            //this mean that we do have new slope, but actual one should be merged with previous one. We will recreate it
            if (previousSlope.HasValue && Math.Abs(previousSlope.Value - slope) < 2)
            {
                var lastIterationDataset = _datasetData.Last();
                var previousIterationElevations = lastIterationDataset.Data;
                var previousIterationBeginningElevation = previousIterationElevations[0].Elevetion;
                var combinedSlopeDistance = e.totalDistance - previousIterationElevations[0].TotalDistance;
                slope = PlotGenerator.CalculateSlopeGrade(e.elevetion - previousIterationBeginningElevation, combinedSlopeDistance, SlopeGradeType);

                iterationElevations = previousIterationElevations.Concat(iterationElevations).ToList();

                _datasetData.Remove(lastIterationDataset);
            }

            if (i != elevationPerDistance.Count - 1)
            {
                var nextIterationValue = elevationPerDistance[i + 1]; 
                iterationElevations.Add((nextIterationValue.elevetion, nextIterationValue.totalDistance));
            }

            var dataset = new Chart.Dataset() { Data = iterationElevations.ToArray() };
            dataset.SetupSlope(slope, SlopeChart?.SlopeType ?? SlopeGradeType.Percent);
            _datasetData.Add(dataset);
            
            iterationElevations.Clear();
            previousSlopeElevation = e.elevetion;
            slopeDistance = 0;
            previousSlope = slope;
            k++;
        }

        if (SlopeChart != null)
        {
            SlopeChart.Datasets = _datasetData.ToArray();
            SlopeChart.ElevationGain = _sumElevationGain;
            SlopeChart.Distance = _totalDistance;
        }
        
        return Task.CompletedTask;
    }
}
