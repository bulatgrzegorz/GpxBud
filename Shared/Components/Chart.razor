@using gpxSlopeCalculator.Logic
@inject IJSRuntime JSRuntime
 
<div id="graph-container">
    <MudGrid Justify="Justify.FlexEnd">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResetChart">Reset zoom</MudButton>
    </MudGrid>
    
    <canvas id="@Id"></canvas>
</div>

 
@code {
    public enum ChartType
    {
        Pie,
        Bar,
        Line,
        Scatter
    }
    
    public class Dataset
    {
        public (double Elevetion, double TotalDistance)[] Data { get; set; }
        public string HexColor { get; private set; }
        public string Label { get; private set; }
        public double SlopeAngle { get; private set; }

        public void SetupAngle(double angle)
        {
            SlopeAngle = angle;
            HexColor = PlotGenerator.SlopeColorPerGainHex(angle);
            Label = PlotGenerator.GetAngleLabel(angle);
        }
    }

    [Parameter]
    public string Id { get; set; }
 
    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public Dataset[] Datasets { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        var config = new
        {
            Type = Type.ToString().ToLower(),
            Options = new
            {
                Responsive = true,
                Scales = new
                {
                    XAxes = new
                    {
                        Ticks = new 
                        {
                            AutoSkip = true,
                            Min = 0,
                            Max = Datasets.SelectMany(x => x.Data).Select(x => x.TotalDistance).Max(),
                            StepSize = 500
                        },
                    }
                },
                Plugins = new {}
            },
            Data = new
            {
                Datasets = Datasets.Select(x => new
                {
                    Data = x.Data.Select(z => new { x = z.TotalDistance, y = z.Elevetion}).ToArray(),
                    SlopeAngle = Math.Round(x.SlopeAngle, 1),
                    BackgroundColor = x.HexColor,
                    Fill = true,
                    PointStyle = false,
                    Label =  x.Label,
                    ShowLine = true
                }).ToArray(),
            }
        };
 
        await JSRuntime.InvokeVoidAsync("setup", Id, config);
    }

    private async Task ResetChart()
    {
        await JSRuntime.InvokeVoidAsync("window.resetChart", Id);
    }

}