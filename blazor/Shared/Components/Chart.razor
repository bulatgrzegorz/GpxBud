@using gpxSlopeCalculator.Logic
@using System.Runtime.CompilerServices
@using MudBlazor.Interfaces
@inject IJSRuntime JSRuntime
 
<div id="graph-container">
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResetChart">Reset zoom</MudButton>
        </MudItem>
        <MudItem>
            <MudSelect T="SlopeGradeType" ValueChanged="SlopeTypeChanged" ToStringFunc="i => Enum.GetName(typeof(SlopeGradeType), i)" OpenIcon="@Icons.Material.Filled.SsidChart" AdornmentColor="Color.Secondary">
                @foreach (SlopeGradeType item in Enum.GetValues(typeof(SlopeGradeType)))
                {
                    <MudSelectItem T="SlopeGradeType" Value="@item"/>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudGrid Justify="Justify.FlexStart">
        <MudItem>
            <MudText @ref="_elevationMudTextComponent">
                <MudIcon Icon="@Icons.Material.Filled.Moving"/> Elevation gain: @($"{ElevationGain:0.00}")m
            </MudText>
        </MudItem>
        <MudItem>
            <MudText @ref="_distanceMudTextComponent">
                <MudIcon Icon="@Icons.Material.Filled.ArrowForward"/> Total distance: @($"{Distance:0.00}")m
            </MudText>
        </MudItem>
    </MudGrid>
    <canvas id="@Id" width="100%" height="35%"></canvas>
</div>

 
@code {
    public enum ChartType
    {
        Pie,
        Bar,
        Line,
        Scatter
    }
    
    public class Dataset
    {
        public (double Elevetion, double TotalDistance, double slope)[] Data { get; set; }
        public string HexColor { get; private set; }
        public Label Label { get; private set; }
        public double Slope { get; private set; }
        public string SlopeType { get; set; }
        public string SlopeTypeSuffix { get; set; }
        public bool ShowLine { get; private set; } = true;

        public Dataset(){}
        public Dataset(Label label)
        {
            Data = [];
            Label = label;
            HexColor = LabelExtensions.SlopeColorPerGainHex(label);
            ShowLine = false;
        }
        
        public void SetupSlope(double slope, SlopeGradeType type)
        {
            var label = LabelExtensions.GetLabel(slope);
            Slope = slope;
            HexColor = LabelExtensions.SlopeColorPerGainHex(label);
            Label = label;
            SlopeTypeSuffix = LabelExtensions.GetSlopeTypeSuffix(type);
            SlopeType = type.ToString();
        }
    }

    private MudText? _elevationMudTextComponent;
    private MudText? _distanceMudTextComponent;

    [Parameter]
    public string Id { get; set; }
 
    [Parameter]
    public ChartType Type { get; set; }

    [Parameter]
    public SlopeGradeType SlopeType { get; set; } = SlopeGradeType.Percent;
    
    [Parameter]
    public double ElevationGain { get; set; }
    
    [Parameter]
    public double Distance { get; set; }
    
    [Parameter]
    public Func<Task> OnSettingsChanged { get; set; }
    
    [Parameter]
    public Func<double, double, double> CalculateElevationGain { get; set; }
    
    [Parameter]
    public Dataset[] Datasets { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var labels = Datasets.GroupBy(x => x.Label).OrderBy(x => x.Key.Order).Select(x => new Dataset(x.Key)).ToArray();
        Dataset[] datasets = [..labels, ..Datasets];
        var maxTotalDistance = Datasets.SelectMany(x => x.Data).Select(x => x.TotalDistance).Max();
        var config = new
        {
            Type = Type.ToString().ToLower(),
            Options = new
            {
                Responsive = true,
                Scales = new
                {
                    XAxes = new
                    {
                        Ticks = new 
                        {
                            AutoSkip = true,
                            Min = 0,
                            Max = maxTotalDistance,
                            StepSize = 500
                        },
                    }
                },
                Plugins = new {}
            },
            Data = new
            {
                Datasets = datasets.Select(x => new
                {
                    Data = x.Data.Select(z => new
                    {
                        x = z.TotalDistance, 
                        y = z.Elevetion, 
                        s = new[] {$"{Math.Round(z.slope, 1)}{x.SlopeTypeSuffix} (segment: {Math.Round(x.Slope, 1)}{x.SlopeTypeSuffix})", $"Distance: {z.TotalDistance}m, Elevation: {z.Elevetion}m"}
                    }).ToArray(),
                    BackgroundColor = x.HexColor,
                    Fill = true,
                    PointStyle = false,
                    Label = x.Label.Value,
                    ShowLine = x.ShowLine,
                }).ToArray(),
                MaxTotalDistance = maxTotalDistance
            }
        };

        await JSRuntime.InvokeVoidAsync("setup", Id, config, DotNetObjectReference.Create(this));
    }

    private async Task ResetChart()
    {
        await JSRuntime.InvokeVoidAsync("window.resetChart", Id);
    }
    
    [JSInvokable("ZoomChanged")]
    public Task ZoomChanged(double visibleXAxesStart, double visibleXAxesEnd, double distance)
    {
        if (visibleXAxesStart > visibleXAxesEnd)
        {
            Console.WriteLine($"Something went wrong on zoom changed delegate, start visible index ({visibleXAxesStart}) cannot be greater then end ({visibleXAxesEnd}).");
            return Task.CompletedTask;
        }

        if (Math.Abs(visibleXAxesStart - visibleXAxesEnd) < 0.001)
        {
            Distance = 0;
            ElevationGain = 0;
            return Task.CompletedTask;
        }
        
        Distance = distance;
        ElevationGain = CalculateElevationGain(visibleXAxesStart, visibleXAxesEnd);
        
        (_elevationMudTextComponent as IMudStateHasChanged)?.StateHasChanged();
        (_distanceMudTextComponent as IMudStateHasChanged)?.StateHasChanged();
        
        return Task.CompletedTask;
    }

    private async Task SlopeTypeChanged(SlopeGradeType value)
    {
        SlopeType = value;
        await (OnSettingsChanged?.Invoke() ?? Task.CompletedTask);
    }
}