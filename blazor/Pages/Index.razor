@page "/"
@inject IJSRuntime JSRuntime

@using gpxSlopeCalculator.Logic

<PageTitle>Slope chart</PageTitle>
<MudPaper Elevation="25">
    <MudToolBar>
        <MudFileUpload T="IBrowserFile" Accept=".gpx" OnFilesChanged="LoadFiles" MaximumFileCount="100">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.CloudUpload"
                           for="@context">
                    Only .gpx files
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <MudSpacer/>
        <MudIconButton Edge="Edge.End" Icon="@Icons.Material.Outlined.Settings" OnClick="@(() => ToggleSettings())" Color="Color.Inherit"/>
    </MudToolBar>
</MudPaper>

<MudDrawer @bind-Open="@settingsOpen" DisableOverlay="true" Anchor="Anchor.End" Elevation="1" Variant="@DrawerVariant.Temporary">
    <MudIconButton Icon="@Icons.Material.Filled.ExitToApp" OnClick="@(() => CloseSettings())" Color="Color.Inherit"/>
    <MudNavMenu>
        <MudNumericField T="int" Max="5000" Value="@_smoothingWindowDistanceThreshold" ValueChanged="i => OnSmoothingWindowsDistanceThresholdChange(i)" Label="Distance threshold of smoothing window"/>
        <MudNumericField T="int" Max="990000" Value="@_slopeDistanceThreshold" ValueChanged="i => OnSlopeDistanceThresholdChange(i)" Label="Slope distance threshold"/>
        <MudNumericField T="int" Value="@_combineSlopesDifferenceThreshold" ValueChanged="i => OnCombineSlopesDifferenceThresholdChange(i)" Label="Combine slopes difference threshold"/>
    </MudNavMenu>
</MudDrawer>



@if (!@IsChartHidden)
{
    <Chart Id="slopeChart" 
           OnSettingsChanged="GenerateSlope" 
           CalculateElevationGain="CalculateElevationGain"
           Type="@Chart.ChartType.Scatter" 
           ElevationGain="_sumElevationGain"
           Distance="_totalDistance" 
           @ref="SlopeChart" 
           Datasets="@_datasetData.ToArray()">
    </Chart>
}

@code {
    private bool settingsOpen;
    private Chart? SlopeChart { get; set; }
    private Gpx? gpxContent = null;
    private bool IsChartHidden => _datasetData.Count == 0;
    private List<Chart.Dataset> _datasetData = new();
    private List<Point> _points = new();
    private SlopeGradeType SlopeGradeType => SlopeChart?.SlopeType ?? SlopeGradeType.Percent;
    private double _sumElevationGain;
    private double _totalDistance;
    private int _slopeDistanceThreshold = 200;
    private int _combineSlopesDifferenceThreshold = 3;
    private int _smoothingWindowDistanceThreshold = 100;

    private void ToggleSettings() => settingsOpen = !settingsOpen;
    private void CloseSettings()
    {
        settingsOpen = !settingsOpen;
        GenerateSlope();
    }

    private async Task LoadFiles(InputFileChangeEventArgs arg)
    {
        if (!arg.File.Name.EndsWith("gpx", StringComparison.InvariantCultureIgnoreCase))
        {
            throw new ArgumentException($"Only gpx files are accepted. Got: {arg.File.Name}");
        }

        await using var fileStream = arg.File.OpenReadStream(30000000L);
        using var streamReader = new StreamReader(fileStream);
        var stringContent = await streamReader.ReadToEndAsync();
        gpxContent = GpxSerializer.Deserialize(stringContent);
        _datasetData = new();
        _points = gpxContent.PrepareGpxPoints(_smoothingWindowDistanceThreshold);
        _sumElevationGain = _points.CalculateElevationGain();
        await GenerateSlope();
    }

    private Task GenerateSlope()
    {
        _datasetData.Clear();
        
        _totalDistance = _points[^1].TotalDistance;

        var points = _points;
        var elevetions = points.Select(x => x.Elevation).ToArray();

        var secondSlopeDerivative = SlopeDerivativeCalculator.GetSecondSlopeDerivative(elevetions);
        var slopePercentile = PercentileCalculator.Percentile(secondSlopeDerivative, 0.95);
        
        var k = 0;
        double slopeDistance = 0;
        double? previousSlope = null;
        var firstElevation = points.First().Elevation;
        var previousSlopeElevation = firstElevation;

        var iterationElevations = new List<(double elevetion, double totalDistance, double slope)>();
        for (var i = 0; i < points.Count - 1; i++)
        {
            var e = points[i];
            var slope = 0d;
            if (slopeDistance > 0)
            {
                slope = PlotGenerator.CalculateSlopeGrade(e.Elevation - previousSlopeElevation, slopeDistance, SlopeGradeType);
            }
            
            slopeDistance += e.PointDistance;
            iterationElevations.Add((e.Elevation, e.TotalDistance, slope));
            
            if (slopeDistance < _slopeDistanceThreshold)
            {
                k++;
                continue;
            }

            var isHighSlope = secondSlopeDerivative[k] >= slopePercentile;
            var isLocalOrMaximum = MathHelper.IsLocalMaximum(elevetions, k, 3) || MathHelper.IsLocalMinimum(elevetions, k, 3);
            if (!isHighSlope && !isLocalOrMaximum)
            {
                k++;
                continue;
            }
            
            //this mean that we do have new slope, but actual one should be merged with previous one. We will recreate it
            if (previousSlope.HasValue && Math.Abs(previousSlope.Value - slope) < _combineSlopesDifferenceThreshold)
            {
                var lastIterationDataset = _datasetData.Last();
                var previousIterationElevations = lastIterationDataset.Data;
                var previousIterationBeginningElevation = previousIterationElevations[0].Elevetion;
                var combinedSlopeDistance = e.TotalDistance - previousIterationElevations[0].TotalDistance;
                slope = PlotGenerator.CalculateSlopeGrade(e.Elevation - previousIterationBeginningElevation, combinedSlopeDistance, SlopeGradeType);

                iterationElevations = previousIterationElevations.Concat(iterationElevations).ToList();

                _datasetData.Remove(lastIterationDataset);
            }

            if (i != points.Count - 1)
            {
                var nextIterationValue = points[i + 1]; 
                var nextIterationSlope = PlotGenerator.CalculateSlopeGrade(nextIterationValue.Elevation - e.Elevation, slopeDistance + nextIterationValue.PointDistance, SlopeGradeType);
                iterationElevations.Add((nextIterationValue.Elevation, nextIterationValue.TotalDistance, nextIterationSlope));
            }

            // var slopeLabel = LabelExtensions.GetLabel(slope);
            // var existingDataSet = _datasetData.SingleOrDefault(x => x.Label.Order == slopeLabel.Order);
            // if (existingDataSet is null)
            // {
            //     var dataset = new Chart.Dataset() { Data = iterationElevations.ToArray() };
            //     dataset.SetupSlope(slope, SlopeChart?.SlopeType ?? SlopeGradeType.Percent);
            //     _datasetData.Add(dataset);
            // }
            // else
            // {
            //     existingDataSet.Data = [..existingDataSet.Data, ..iterationElevations];
            // }

            var dataset = new Chart.Dataset() { Data = iterationElevations.ToArray() };
            dataset.SetupSlope(slope, SlopeChart?.SlopeType ?? SlopeGradeType.Percent);
            _datasetData.Add(dataset);

            
            iterationElevations.Clear();
            previousSlopeElevation = e.Elevation;
            slopeDistance = 0;
            previousSlope = slope;
            k++;
        }

        if (SlopeChart != null)
        {
            SlopeChart.Datasets = _datasetData.ToArray();
            SlopeChart.ElevationGain = _sumElevationGain;
            SlopeChart.Distance = _totalDistance;
        }
        
        return Task.CompletedTask;
    }
    
    //TODO: Should be refactored and combined somehow with CalculateElevationGain(Gpx gpxContent)
    private double CalculateElevationGain(double visibleXAxesStart, double visibleXAxesEnd)
    {
        var visiblePoints = _points.Where(x => x.TotalDistance >= visibleXAxesStart && x.TotalDistance <= visibleXAxesEnd).ToList();
        if (visiblePoints.Count == 0) return 0;
        return visiblePoints.CalculateElevationGain();
    }
    
    private async Task OnSmoothingWindowsDistanceThresholdChange(int val)
    {
        _smoothingWindowDistanceThreshold = val;
        if (gpxContent is not null)
        {
            _points = gpxContent.PrepareGpxPoints(_smoothingWindowDistanceThreshold);   
            _sumElevationGain = _points.CalculateElevationGain();
            await GenerateSlope();
        }
    }

    private async Task OnSlopeDistanceThresholdChange(int val)
    {
        _slopeDistanceThreshold = val;
        await GenerateSlope();
    }
    private async Task OnCombineSlopesDifferenceThresholdChange(int val)
    {
        _combineSlopesDifferenceThreshold = val;
        await GenerateSlope();
    }
}
